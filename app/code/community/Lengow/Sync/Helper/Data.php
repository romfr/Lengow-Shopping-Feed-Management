<?php
/**
 * Lengow sync helper data
 *
 * @category    Lengow
 * @package     Lengow_Sync
 * @author      Ludovic Drin <ludovic@lengow.com> & Benjamin Le Nev√© <benjamin.le-neve@lengow.com>
 * @copyright   2015 Lengow SAS
 * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Lengow_Sync_Helper_Data extends Mage_Core_Helper_Abstract {

    /**
     * Transform SimpleXMLElement to associative array
     * SimpleXMLElement must be conform structure, generated by assocToXml()
     *
     * @param SimpleXMLElement $xml
     * @return array
     */
    public function xmlToAssoc(SimpleXMLElement $xml)
    {
        $array = array();
        foreach ($xml as $key => $value) {
            $array[$key] = trim((string)$value);
            if (empty($array[$key]) && !empty($value))
                $array[$key] = self::xmlToAssoc($value);
            else
                $array[$key] = (string)$value;
        }
        return $array;
    }

	/**
     * Returns the node and children as an array
     *	values ares trimed
     *
     * @param bool $isCanonical - whether to ignore attributes
     * @return array|string
     */
	public function asArray(SimpleXMLElement $xml,$isCanonical = true)
    {
        $result = array();
        if (!$isCanonical) {
            // add attributes
            foreach ($xml->attributes() as $attributeName => $attribute) {
                if ($attribute) {
                    $result['@'][$attributeName] = trim((string)$attribute);
                }
            }
        }
        // add children values
        if ($xml->hasChildren()) {
            foreach ($xml->children() as $childName => $child) {
                if(!$child->hasChildren())
                	$result[$childName] = $this->asArray($child,$isCanonical);
            	else
       				$result[$childName][] = $this->asArray($child,$isCanonical);
            }
        } else {
            if (empty($result)) {
                // return as string, if nothing was found
                $result = trim((string) $xml);
            } else {
                // value has zero key element
                $result[0] = trim((string) $xml);
            }
        }
        return $result;
    }

    /**
     * Writes log
     *
     * @param string $message   log message
     * @param string $id_order  lengow order id
     * 
     * @return Lengow_Sync_Helper_Data
     */
    public function log($message, $id_order = null)
    {
    	$log_model = Mage::getModel('lensync/log');
    	$log_model->log($message, $id_order);
    	return $this;
    }

    /**
     * Suppress log files when too old.
     */
    public function cleanLog()
    {
        $resource = Mage::getSingleton('core/resource');
        $writeConnection = $resource->getConnection('core_write');
        $table = $resource->getTableName('lensync/log');
        $query = "DELETE FROM ".$table." WHERE date < DATE_SUB(NOW(),INTERVAL 20 DAY)";
        $writeConnection->query($query);
    }

    /**
     * Clean None utf-8 characters
     * @param string $value
     * @return string $value
     */
    public function cleanNotUtf8($value)
    {
    	$value = Mage::helper('core/string')->cleanString($value);
    	//reject overly long 2 byte sequences, as well as characters above U+10000 and replace with blank
		$value = preg_replace('/[\x00-\x08\x10\x0B\x0C\x0E-\x19\x7F]'.
		 '|[\x00-\x7F][\x80-\xBF]+'.
		 '|([\xC0\xC1]|[\xF0-\xFF])[\x80-\xBF]*'.
		 '|[\xC2-\xDF]((?![\x80-\xBF])|[\x80-\xBF]{2,})'.
		 '|[\xE0-\xEF](([\x80-\xBF](?![\x80-\xBF]))|(?![\x80-\xBF]{2})|[\x80-\xBF]{3,})/S',
		 '', $value );
		//reject overly long 3 byte sequences and UTF-16 surrogates and replace with blank
		$value = preg_replace('/\xE0[\x80-\x9F][\x80-\xBF]'.
		 '|\xED[\xA0-\xBF][\x80-\xBF]/S','', $value );
		/*$value = preg_replace("/([\x80-\xFF])/e",
				"chr(0xC0|ord('\\1')>>6).chr(0x80|ord('\\1')&0x3F)",
				$value);*/
		$value = str_replace(chr(31),"", $value);
		$value = str_replace(chr(30),"", $value);
		$value = str_replace(chr(29),"", $value);
		$value = str_replace(chr(28),"", $value);
		//$value = iconv("UTF-8","UTF-8//IGNORE",$value);
		return $value;
    }

    /**
     * Updates marketplace.xml
     */
    public function updateMarketplaceXML()
    {
        $config = Mage::getSingleton('lensync/config');
        $mp_update = $config->get('hidden/last_synchro');
        if (!$mp_update || !$mp_update == '0000-00-00' ||$mp_update != date('Y-m-d'))
            $config->updateMarketPlaceConfiguration();
    }

    public function cleanMethod($method)
    {
        return str_replace(array(' ', '-', '\''), '_', $method);
    }
}